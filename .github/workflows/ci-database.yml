name: CI Database Tests

on:
  push:
    branches: [main, develop]
    paths: 
      - 'supabase/migrations/**'
      - 'database/sql/**'
      - 'tests/db/**'
      - '.github/workflows/ci-database.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'supabase/migrations/**'
      - 'database/sql/**'
      - 'tests/db/**'
      - '.github/workflows/ci-database.yml'

jobs:
  database-tests:
    name: Database Migration & Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: emotions_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/emotions_test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: emotions_test
      DB_USER: postgres
      DB_PASS: postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create test database
        run: |
          PGPASSWORD=postgres createdb -h localhost -U postgres emotions_test || echo "Database already exists"

      - name: Install Flyway
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz | tar xvz
          sudo ln -s `pwd`/flyway-9.22.3/flyway /usr/local/bin 

      - name: Apply migrations (Flyway)
        run: |
          if [ -d "database/sql" ]; then
            flyway -url=$DATABASE_URL -user=postgres -password=postgres -locations=filesystem:database/sql migrate
          fi

      - name: Apply Supabase migrations
        run: |
          if [ -d "supabase/migrations" ]; then
            for file in supabase/migrations/*.sql; do
              if [ -f "$file" ]; then
                echo "Applying migration: $file"
                PGPASSWORD=postgres psql -h localhost -U postgres -d emotions_test -f "$file"
              fi
            done
          fi

      - name: Run database tests
        run: |
          if [ -f "package.json" ] && npm run | grep -q "test:db"; then
            npm run test:db
          else
            echo "No database tests found, running basic connectivity test"
            PGPASSWORD=postgres psql -h localhost -U postgres -d emotions_test -c "SELECT version();"
          fi

      - name: Test RLS policies
        run: |
          echo "Testing Row Level Security policies..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d emotions_test -c "
          -- Test RLS is enabled on critical tables
          SELECT schemaname, tablename, rowsecurity 
          FROM pg_tables t 
          JOIN pg_class c ON c.relname = t.tablename 
          WHERE schemaname = 'public' 
          AND c.relrowsecurity = false
          AND tablename NOT IN ('migrations', 'schema_migrations');
          
          -- Count policies per table
          SELECT schemaname, tablename, COUNT(policyname) as policy_count
          FROM pg_policies 
          WHERE schemaname = 'public'
          GROUP BY schemaname, tablename
          ORDER BY policy_count ASC;
          "

      - name: Test database functions
        run: |
          echo "Testing database functions..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d emotions_test -c "
          -- List all custom functions
          SELECT routine_name, routine_type 
          FROM information_schema.routines 
          WHERE routine_schema = 'public' 
          AND routine_name NOT LIKE 'pg_%'
          ORDER BY routine_name;
          
          -- Test basic function if exists
          SELECT CASE 
            WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'is_admin')
            THEN 'is_admin function exists'
            ELSE 'No is_admin function found'
          END as function_check;
          "

      - name: Generate test report
        run: |
          echo "Database CI Report - $(date)" > db-test-report.txt
          echo "=================================" >> db-test-report.txt
          echo "" >> db-test-report.txt
          
          echo "Migration Status:" >> db-test-report.txt
          PGPASSWORD=postgres psql -h localhost -U postgres -d emotions_test -c "
          SELECT 
            COUNT(*) as total_tables,
            COUNT(CASE WHEN c.relrowsecurity THEN 1 END) as rls_enabled_tables,
            COUNT(CASE WHEN NOT c.relrowsecurity THEN 1 END) as rls_disabled_tables
          FROM pg_class c 
          JOIN pg_namespace n ON n.oid = c.relnamespace 
          WHERE c.relkind = 'r' AND n.nspname = 'public'
          AND c.relname NOT IN ('migrations', 'schema_migrations');
          " >> db-test-report.txt
          
          echo "" >> db-test-report.txt
          echo "Test completed successfully at $(date)" >> db-test-report.txt

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: database-test-results
          path: |
            db-test-report.txt
            test-results.json
          retention-days: 30

      - name: Fail on RLS violations
        run: |
          # Check for tables without RLS (except system tables)
          TABLES_WITHOUT_RLS=$(PGPASSWORD=postgres psql -h localhost -U postgres -d emotions_test -t -c "
          SELECT COUNT(*) 
          FROM pg_tables t 
          JOIN pg_class c ON c.relname = t.tablename 
          WHERE schemaname = 'public' 
          AND c.relrowsecurity = false
          AND tablename NOT IN ('migrations', 'schema_migrations');
          " | xargs)
          
          if [ "$TABLES_WITHOUT_RLS" -gt 0 ]; then
            echo "❌ Found $TABLES_WITHOUT_RLS tables without RLS enabled!"
            PGPASSWORD=postgres psql -h localhost -U postgres -d emotions_test -c "
            SELECT tablename 
            FROM pg_tables t 
            JOIN pg_class c ON c.relname = t.tablename 
            WHERE schemaname = 'public' 
            AND c.relrowsecurity = false
            AND tablename NOT IN ('migrations', 'schema_migrations');
            "
            exit 1
          else
            echo "✅ All tables have RLS properly configured"
          fi