
import { Emotion, EmotionResult } from '@/types';
import { v4 as uuid } from 'uuid';

// Mock database of emotions
let emotionsDB: Emotion[] = [];

// Save a new emotion entry
export async function saveEmotion(emotion: Emotion): Promise<Emotion> {
  // Ensure the emotion has an ID
  if (!emotion.id) {
    emotion.id = uuid();
  }
  
  // Set date if not provided
  if (!emotion.date) {
    emotion.date = new Date().toISOString();
  }
  
  // Add to "database"
  emotionsDB.push(emotion);
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return emotion;
}

// Fetch the latest emotion for a user
export async function fetchLatestEmotion(userId: string): Promise<Emotion | null> {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 300));
  
  // Find emotions for this user, sorted by date (newest first)
  const userEmotions = emotionsDB
    .filter(e => e.user_id === userId)
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
  
  return userEmotions.length > 0 ? userEmotions[0] : null;
}

// Fetch all emotions for a user
export async function fetchUserEmotions(userId: string): Promise<Emotion[]> {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 600));
  
  // Find emotions for this user, sorted by date (newest first)
  return emotionsDB
    .filter(e => e.user_id === userId)
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
}

// Process an emotion scan result
export async function processEmotionScan(
  userId: string, 
  scanData: { text?: string; emojis?: string; audio_url?: string }
): Promise<EmotionResult> {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 800));
  
  // Mock emotion detection based on input
  let emotion = 'neutral';
  let score = 50 + Math.floor(Math.random() * 30);
  
  // Very basic emotion detection for demo purposes
  if (scanData.text) {
    const text = scanData.text.toLowerCase();
    if (text.includes('happy') || text.includes('glad') || text.includes('joy')) emotion = 'happy';
    else if (text.includes('sad') || text.includes('upset')) emotion = 'sad';
    else if (text.includes('angry') || text.includes('mad')) emotion = 'angry';
    else if (text.includes('scared') || text.includes('afraid')) emotion = 'fearful';
    else if (text.includes('calm') || text.includes('relaxed')) emotion = 'calm';
    else if (text.includes('tired') || text.includes('exhausted')) emotion = 'tired';
    else if (text.includes('stressed') || text.includes('overwhelmed')) emotion = 'stressed';
  }
  
  // Emoji-based detection
  if (scanData.emojis) {
    if (scanData.emojis.includes('üòä') || scanData.emojis.includes('üòÉ')) emotion = 'happy';
    else if (scanData.emojis.includes('üòî') || scanData.emojis.includes('üò¢')) emotion = 'sad';
    else if (scanData.emojis.includes('üò°') || scanData.emojis.includes('üò†')) emotion = 'angry';
    else if (scanData.emojis.includes('üò®') || scanData.emojis.includes('üò∞')) emotion = 'fearful';
    else if (scanData.emojis.includes('üòå') || scanData.emojis.includes('üßò')) emotion = 'calm';
    else if (scanData.emojis.includes('üò¥') || scanData.emojis.includes('ü•±')) emotion = 'tired';
    else if (scanData.emojis.includes('üò©') || scanData.emojis.includes('üò´')) emotion = 'stressed';
  }
  
  // Generate a mock result
  const result: EmotionResult = {
    id: uuid(),
    user_id: userId,
    date: new Date().toISOString(),
    emotion: emotion,
    score: score,
    confidence: score / 100,
    intensity: (score - 40) / 60, // Scale to 0-1
    text: scanData.text,
    emojis: scanData.emojis,
    feedback: generateFeedback(emotion),
    recommendations: generateRecommendations(emotion)
  };
  
  return result;
}

// Create a new emotion entry from user input
export async function createEmotionEntry(data: {
  user_id: string;
  text?: string;
  emojis?: string;
  audio_url?: string;
}): Promise<Emotion> {
  // Process the scan
  const scanResult = await processEmotionScan(data.user_id, {
    text: data.text,
    emojis: data.emojis,
    audio_url: data.audio_url
  });
  
  // Create and save the emotion
  const emotion: Emotion = {
    id: scanResult.id || uuid(),
    user_id: data.user_id,
    date: scanResult.date || new Date().toISOString(),
    emotion: scanResult.emotion,
    name: scanResult.emotion,
    score: scanResult.score,
    confidence: scanResult.confidence,
    intensity: scanResult.intensity,
    text: scanResult.text,
    emojis: scanResult.emojis,
    ai_feedback: scanResult.feedback,
    source: 'manual',
    category: 'emotion'
  };
  
  return await saveEmotion(emotion);
}

// Helper function to generate feedback
function generateFeedback(emotion: string): string {
  const feedbacks: Record<string, string[]> = {
    'happy': [
      'Vous semblez √™tre dans un √©tat de joie et de bien-√™tre. C\'est le moment id√©al pour accomplir des t√¢ches cr√©atives.',
      'Votre bonne humeur peut √™tre contagieuse! Profitez-en pour collaborer avec vos coll√®gues.'
    ],
    'sad': [
      'Vous semblez ressentir de la tristesse. C\'est une √©motion normale qui nous rappelle ce qui compte pour nous.',
      'La tristesse peut parfois nous aider √† r√©fl√©chir et √† prendre du recul. Une petite pause pourrait vous faire du bien.'
    ],
    'angry': [
      'Vous semblez ressentir de la col√®re. Cette √©nergie peut √™tre canalis√©e de fa√ßon constructive.',
      'La col√®re nous signale souvent qu\'une limite a √©t√© franchie. Essayez de prendre quelques respirations profondes.'
    ],
    'fearful': [
      'Vous semblez ressentir de la peur ou de l\'anxi√©t√©. Ces √©motions nous aident √† identifier des risques potentiels.',
      'L\'anxi√©t√© peut parfois nous submerger. Une courte m√©ditation pourrait vous aider √† retrouver votre calme.'
    ],
    'calm': [
      'Vous semblez √™tre dans un √©tat de calme. C\'est id√©al pour la concentration et la r√©flexion.',
      'Le calme est un √©tat pr√©cieux. Profitez-en pour avancer sur des t√¢ches qui demandent de la pr√©cision.'
    ],
    'tired': [
      'Vous semblez √™tre fatigu√©. Votre corps vous envoie peut-√™tre un signal qu\'il est temps de ralentir.',
      'La fatigue peut affecter notre concentration et notre humeur. Une courte pause pourrait vous revitaliser.'
    ],
    'stressed': [
      'Vous semblez √™tre stress√©. Le stress est une r√©ponse naturelle face aux d√©fis, mais il est important de le g√©rer.',
      'Face au stress, essayez de d√©composer vos t√¢ches en √©tapes plus petites et plus g√©rables.'
    ],
    'neutral': [
      'Votre √©tat √©motionnel semble √©quilibr√©. C\'est un bon moment pour planifier ou prendre des d√©cisions.',
      'Un √©tat neutre offre une clart√© mentale qui peut √™tre b√©n√©fique pour √©valuer des situations complexes.'
    ]
  };
  
  // Get feedback for this emotion or default to neutral
  const emotionFeedbacks = feedbacks[emotion] || feedbacks['neutral'];
  
  // Return a random feedback
  return emotionFeedbacks[Math.floor(Math.random() * emotionFeedbacks.length)];
}

// Helper function to generate recommendations
function generateRecommendations(emotion: string): string[] {
  const allRecommendations: Record<string, string[]> = {
    'happy': [
      'Partagez cette √©nergie positive avec votre √©quipe',
      'Profitez de cet √©lan pour des t√¢ches cr√©atives',
      'Notez ce qui vous a mis dans cet √©tat pour le reproduire'
    ],
    'sad': [
      'Prenez une courte pause de 5 minutes',
      '√âcoutez une musique apaisante',
      'Parlez √† quelqu\'un en qui vous avez confiance'
    ],
    'angry': [
      'Faites quelques respirations profondes',
      'Prenez un moment pour identifier la source de cette col√®re',
      'Reportez les d√©cisions importantes √† plus tard'
    ],
    'fearful': [
      'Essayez notre exercice de respiration guid√©e',
      '√âcrivez ce qui vous pr√©occupe pour prendre du recul',
      'Divisez les grands d√©fis en petites √©tapes g√©rables'
    ],
    'calm': [
      'C\'est le moment id√©al pour des t√¢ches n√©cessitant de la concentration',
      'Profitez de cette clart√© mentale pour planifier',
      'Notez ce qui vous aide √† maintenir cet √©tat'
    ],
    'tired': [
      'Consid√©rez une courte pause ou micro-sieste',
      'Hydratez-vous et prenez une collation nutritive',
      'Faites quelques √©tirements pour vous revitaliser'
    ],
    'stressed': [
      'Essayez notre session de micro-m√©ditation de 2 minutes',
      'R√©organisez votre liste de t√¢ches par priorit√©',
      'Faites une courte marche pour vous a√©rer l\'esprit'
    ],
    'neutral': [
      'C\'est un bon moment pour planifier votre journ√©e',
      'Essayez une session de brainstorming sur un projet',
      'R√©fl√©chissez √† vos priorit√©s actuelles'
    ]
  };
  
  const recommendations = allRecommendations[emotion] || allRecommendations['neutral'];
  return recommendations;
}
