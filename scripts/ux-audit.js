#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üéØ AUDIT UX COMPLET - EmotionsCare');
console.log('=====================================\n');

// Structure de l'application √† analyser
const userJourneys = {
  'Visiteur anonyme': [
    '/ (HomePage)',
    '/choose-mode (S√©lection du mode)',
    '/b2c/login (Connexion B2C)',
    '/b2b/selection (S√©lection B2B)',
    '/b2b/user/login (Connexion User B2B)',
    '/b2b/admin/login (Connexion Admin B2B)'
  ],
  'Utilisateur B2C': [
    '/b2c/dashboard (Tableau de bord)',
    '/b2c/onboarding (Int√©gration)',
    '/b2c/profile (Profil)',
    '/b2c/emotions (Suivi √©motionnel)',
    '/b2c/music (Musique adaptative)',
    '/b2c/community (Communaut√©)',
    '/b2c/challenges (D√©fis)'
  ],
  'Utilisateur B2B': [
    '/b2b/user/dashboard (Tableau de bord)',
    '/b2b/user/profile (Profil)',
    '/b2b/user/wellbeing (Bien-√™tre)',
    '/b2b/user/team (√âquipe)',
    '/b2b/user/resources (Ressources)'
  ],
  'Admin B2B': [
    '/b2b/admin/dashboard (Tableau de bord RH)',
    '/b2b/admin/overview (Vue globale)',
    '/b2b/admin/team-management (Gestion √©quipe)',
    '/b2b/admin/analytics (Analytiques)',
    '/b2b/admin/settings (Param√®tres)'
  ]
};

const uxCriteria = {
  'Navigation et Architecture': {
    'Clart√© des menus': 'La navigation est-elle intuitive ?',
    'Profondeur des pages': 'R√®gle des 3 clics respect√©e ?',
    'Coh√©rence des parcours': 'Les flux sont-ils logiques ?',
    'Breadcrumbs': 'L\'utilisateur sait-il o√π il est ?',
    'Retour en arri√®re': 'Peut-il facilement revenir ?'
  },
  'Interface et Interaction': {
    'Hi√©rarchie visuelle': 'Les √©l√©ments importants sont-ils mis en avant ?',
    'Lisibilit√©': 'Le contenu est-il facile √† lire ?',
    'Affordances': 'Les √©l√©ments cliquables sont-ils √©vidents ?',
    'Feedback utilisateur': 'Les actions ont-elles un retour ?',
    '√âtats de chargement': 'L\'attente est-elle g√©r√©e ?'
  },
  'Contenu et Communication': {
    'Clart√© des messages': 'Le langage est-il accessible ?',
    'Aide contextuelle': 'L\'utilisateur a-t-il de l\'aide ?',
    'Messages d\'erreur': 'Sont-ils utiles et bienveillants ?',
    'Onboarding': 'L\'utilisateur comprend-il l\'app ?',
    'Vide et √©tats': 'Les pages vides sont-elles accueillantes ?'
  },
  'Performance et Technique': {
    'Temps de chargement': 'Les pages se chargent-elles vite ?',
    'Responsive design': 'L\'exp√©rience mobile est-elle optimale ?',
    'Accessibilit√©': 'L\'app est-elle accessible √† tous ?',
    'Gestion d\'erreurs': 'Les erreurs sont-elles gracieuses ?',
    'Offline support': 'L\'app fonctionne-t-elle hors ligne ?'
  },
  '√âmotion et Engagement': {
    'Personnalisation': 'L\'exp√©rience est-elle personnalis√©e ?',
    'Gamification': 'Y a-t-il des √©l√©ments ludiques ?',
    'Empathie': 'L\'app comprend-elle l\'utilisateur ?',
    'Motivation': 'L\'utilisateur est-il encourag√© ?',
    'Confiance': 'L\'utilisateur fait-il confiance √† l\'app ?'
  }
};

// Analyse des fichiers sources
const srcDir = path.join(process.cwd(), 'src');
const componentsAnalysis = {
  totalComponents: 0,
  interactiveComponents: 0,
  accessibleComponents: 0,
  responsiveComponents: 0
};

function analyzeComponents(dir) {
  if (!fs.existsSync(dir)) return;
  
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      analyzeComponents(filePath);
    } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
      componentsAnalysis.totalComponents++;
      
      try {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // V√©rification des √©l√©ments interactifs
        if (content.match(/onClick|onSubmit|onChange|Button|Input|Select/)) {
          componentsAnalysis.interactiveComponents++;
        }
        
        // V√©rification de l'accessibilit√©
        if (content.match(/aria-|role=|alt=|htmlFor/)) {
          componentsAnalysis.accessibleComponents++;
        }
        
        // V√©rification du responsive
        if (content.match(/md:|lg:|xl:|sm:|responsive/)) {
          componentsAnalysis.responsiveComponents++;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  Erreur lecture fichier: ${filePath}`);
      }
    }
  });
}

console.log('üìä ANALYSE DES PARCOURS UTILISATEUR');
console.log('==================================\n');

Object.entries(userJourneys).forEach(([userType, journey]) => {
  console.log(`üë§ ${userType}:`);
  journey.forEach((page, index) => {
    console.log(`   ${index + 1}. ${page}`);
  });
  console.log('');
});

console.log('üîç ANALYSE DES COMPOSANTS');
console.log('========================\n');

analyzeComponents(srcDir);

console.log(`üìà Statistiques des composants:`);
console.log(`   - Total composants: ${componentsAnalysis.totalComponents}`);
console.log(`   - Composants interactifs: ${componentsAnalysis.interactiveComponents} (${Math.round(componentsAnalysis.interactiveComponents/componentsAnalysis.totalComponents*100)}%)`);
console.log(`   - Composants accessibles: ${componentsAnalysis.accessibleComponents} (${Math.round(componentsAnalysis.accessibleComponents/componentsAnalysis.totalComponents*100)}%)`);
console.log(`   - Composants responsive: ${componentsAnalysis.responsiveComponents} (${Math.round(componentsAnalysis.responsiveComponents/componentsAnalysis.totalComponents*100)}%)`);
console.log('');

console.log('üéØ CRIT√àRES UX √Ä √âVALUER');
console.log('========================\n');

Object.entries(uxCriteria).forEach(([category, criteria]) => {
  console.log(`üìã ${category}:`);
  Object.entries(criteria).forEach(([criterion, question]) => {
    console.log(`   ‚úì ${criterion}: ${question}`);
  });
  console.log('');
});

// G√©n√©ration du rapport
const reportData = {
  timestamp: new Date().toISOString(),
  userJourneys,
  uxCriteria,
  componentsAnalysis,
  recommendations: [
    'Cr√©er un syst√®me de m√©triques UX en temps r√©el',
    'Impl√©menter des tests utilisateur automatis√©s',
    'Ajouter des heatmaps et analytics comportementales',
    'D√©velopper un syst√®me de feedback utilisateur',
    'Optimiser les parcours de conversion',
    'Am√©liorer les micro-interactions',
    'Renforcer la personnalisation',
    'Cr√©er des personas d√©taill√©s'
  ]
};

fs.writeFileSync(
  path.join(process.cwd(), 'reports', 'ux-audit-summary.json'),
  JSON.stringify(reportData, null, 2)
);

console.log('‚úÖ Audit UX termin√© ! Rapport sauvegard√© dans reports/ux-audit-summary.json');
console.log('üéØ Prochaine √©tape: Ouvrir le tableau de bord UX √† /ux-dashboard');