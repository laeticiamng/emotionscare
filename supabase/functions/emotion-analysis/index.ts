import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.43.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { text, userId, analysisType = 'text' } = await req.json();
    
    console.log('üß† Analyzing emotion:', { analysisType, textLength: text?.length, userId });

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
    const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

    // Perform emotion analysis
    const analysis = await analyzeTextEmotion(text);

    // Store analysis result if userId provided
    if (userId) {
      const { error: storeError } = await supabase
        .from('emotion_analysis_logs')
        .insert({
          user_id: userId,
          input_text: text.substring(0, 500), // Store first 500 chars for privacy
          detected_emotion: analysis.emotion,
          confidence_score: analysis.confidence,
          valence: analysis.valence,
          arousal: analysis.arousal,
          analysis_metadata: {
            text_length: text.length,
            analysis_type: analysisType,
            processing_time: analysis.processingTime
          }
        });

      if (storeError) {
        console.error('Error storing analysis:', storeError);
      }
    }

    console.log('‚úÖ Emotion analysis completed:', analysis.emotion, 'confidence:', analysis.confidence);

    return new Response(JSON.stringify({
      id: `analysis-${Date.now()}`,
      timestamp: new Date().toISOString(),
      emotion: analysis.emotion,
      intensity: analysis.intensity,
      confidence: analysis.confidence,
      valence: analysis.valence,
      arousal: analysis.arousal,
      insight: analysis.insight,
      recommendations: analysis.recommendations,
      processingTime: analysis.processingTime
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in emotion-analysis:', error);
    return new Response(JSON.stringify({ 
      error: 'Emotion analysis failed',
      message: error.message,
      fallback: {
        emotion: 'neutral',
        confidence: 0.5,
        insight: 'Analyse temporairement indisponible, mais votre bien-√™tre reste notre priorit√©.'
      }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function analyzeTextEmotion(text: string) {
  const startTime = Date.now();
  
  // In production, this would use:
  // - OpenAI GPT for emotion analysis
  // - Hugging Face sentiment models
  // - Custom trained emotion detection models
  // - Azure Cognitive Services
  
  // For now, implement rule-based analysis with emotional intelligence
  const emotionAnalysis = performRuleBasedAnalysis(text);
  
  const processingTime = Date.now() - startTime;
  
  return {
    ...emotionAnalysis,
    processingTime
  };
}

function performRuleBasedAnalysis(text: string) {
  const lowerText = text.toLowerCase();
  
  // Emotion keywords and patterns
  const emotionPatterns = {
    happy: {
      keywords: ['heureux', 'content', 'joyeux', 'ravi', 'enthousiaste', 'optimiste', 'sourire', 'rire', 'bien', 'g√©nial', 'fantastique', 'merveilleux'],
      patterns: [/j'adore/, /c'est super/, /trop bien/, /excellent/, /parfait/],
      valence: 0.8,
      arousal: 0.6
    },
    calm: {
      keywords: ['calme', 'paisible', 'serein', 'tranquille', 'd√©tendu', 'relax√©', 'zen', 'apais√©', '√©quilibr√©'],
      patterns: [/me d√©tendre/, /besoin de calme/, /moment de paix/],
      valence: 0.6,
      arousal: 0.2
    },
    energetic: {
      keywords: ['√©nergique', 'dynamique', 'motiv√©', 'actif', 'excit√©', 'stimul√©', 'vivant', '√©lectrique'],
      patterns: [/plein d'√©nergie/, /super motiv√©/, /pr√™t √† tout/],
      valence: 0.7,
      arousal: 0.9
    },
    focused: {
      keywords: ['concentr√©', 'focalis√©', 'attentif', 'd√©termin√©', 'appliqu√©', 'productif'],
      patterns: [/besoin de me concentrer/, /en mode focus/, /travail intense/],
      valence: 0.6,
      arousal: 0.5
    },
    sad: {
      keywords: ['triste', 'malheureux', 'd√©prim√©', 'm√©lancolique', 'abattu', 'd√©courag√©', 'morose'],
      patterns: [/j'ai le blues/, /pas le moral/, /d√©prime/],
      valence: 0.2,
      arousal: 0.3
    },
    anxious: {
      keywords: ['anxieux', 'stress√©', 'inquiet', 'nerveux', 'angoiss√©', 'tendu', 'pr√©occup√©'],
      patterns: [/je stress/, /j'angoisse/, /j'ai peur/],
      valence: 0.3,
      arousal: 0.8
    },
    angry: {
      keywords: ['en col√®re', 'furieux', 'irrit√©', '√©nerv√©', 'f√¢ch√©', 'agac√©', 'contrari√©'],
      patterns: [/√ßa m'√©nerve/, /je suis furieux/, /j'en ai marre/],
      valence: 0.2,
      arousal: 0.9
    },
    tired: {
      keywords: ['fatigu√©', '√©puis√©', 'las', '√©reint√©', 'crev√©', 'ext√©nu√©'],
      patterns: [/je suis crev√©/, /trop fatigu√©/, /besoin de repos/],
      valence: 0.3,
      arousal: 0.1
    }
  };

  let bestMatch = { emotion: 'neutral', score: 0, valence: 0.5, arousal: 0.5 };
  
  for (const [emotion, config] of Object.entries(emotionPatterns)) {
    let score = 0;
    
    // Check keywords
    for (const keyword of config.keywords) {
      if (lowerText.includes(keyword)) {
        score += 1;
      }
    }
    
    // Check patterns
    for (const pattern of config.patterns) {
      if (pattern.test(lowerText)) {
        score += 2; // Patterns have higher weight
      }
    }
    
    // Normalize score by text length
    const normalizedScore = score / Math.max(1, text.split(' ').length / 10);
    
    if (normalizedScore > bestMatch.score) {
      bestMatch = {
        emotion,
        score: normalizedScore,
        valence: config.valence,
        arousal: config.arousal
      };
    }
  }

  const confidence = Math.min(0.95, 0.5 + (bestMatch.score * 0.3));
  const intensity = Math.min(1, bestMatch.score * 0.4 + 0.3);

  return {
    emotion: bestMatch.emotion,
    confidence,
    intensity,
    valence: bestMatch.valence,
    arousal: bestMatch.arousal,
    insight: generateInsight(bestMatch.emotion, confidence, text),
    recommendations: generateRecommendations(bestMatch.emotion, intensity)
  };
}

function generateInsight(emotion: string, confidence: number, text: string): string {
  const insights = {
    happy: [
      "Votre expression rayonne de positivit√© ! Cette belle √©nergie m√©rite d'√™tre cultiv√©e.",
      "Je sens une joie authentique dans vos mots. Continuez √† nourrir cette humeur lumineuse.",
      "Votre optimisme transpara√Æt magnifiquement. C'est un v√©ritable cadeau que vous vous offrez."
    ],
    calm: [
      "Votre s√©r√©nit√© est palpable. Vous semblez avoir trouv√© un bel √©quilibre int√©rieur.",
      "Cette tranquillit√© d'esprit est pr√©cieuse. Savourez ce moment de paix.",
      "Votre calme inspire confiance. Vous ma√Ætrisez bien l'art de la zen attitude."
    ],
    energetic: [
      "Quelle belle vitalit√© ! Votre dynamisme est contagieux et inspirant.",
      "Cette √©nergie d√©bordante est formidable. Canalisez-la vers vos projets les plus chers.",
      "Votre enthousiasme fait plaisir √† ressentir. Utilisez cette force motrice √† bon escient."
    ],
    focused: [
      "Votre concentration est remarquable. Cette d√©termination vous m√®nera loin.",
      "Je sens cette belle intention de focus. Votre mental est align√© sur vos objectifs.",
      "Cette clart√© d'esprit est un atout pr√©cieux. Gardez cette belle lucidit√©."
    ],
    sad: [
      "Je per√ßois cette m√©lancolie dans vos mots. Accordez-vous la douceur que vous m√©ritez.",
      "Ces moments de tristesse font partie de l'exp√©rience humaine. Vous n'√™tes pas seul(e).",
      "Votre vuln√©rabilit√© t√©moigne de votre authenticit√©. Prenez soin de vous avec bienveillance."
    ],
    anxious: [
      "Je sens cette tension int√©rieure. Respirez profond√©ment, vous avez les ressources pour traverser cela.",
      "Cette anxi√©t√© est compr√©hensible. Rappelez-vous que vous √™tes plus fort(e) que vos inqui√©tudes.",
      "Votre stress transpara√Æt, mais n'oubliez pas que chaque temp√™te finit par passer."
    ],
    angry: [
      "Cette col√®re semble intense. Prenez le temps de la laisser se transformer en force constructive.",
      "Je sens cette frustration. Votre √©motion est l√©gitime, trouvons ensemble des moyens sains de l'exprimer.",
      "Cette irritation demande √† √™tre entendue. √âcoutez ce qu'elle a √† vous dire, puis laissez-la partir."
    ],
    tired: [
      "Votre fatigue est bien r√©elle. Accordez-vous le repos dont votre corps et votre esprit ont besoin.",
      "Cette lassitude appelle √† la r√©cup√©ration. Soyez doux/douce avec vous-m√™me.",
      "Votre √©puisement m√©rite attention. C'est le moment de ralentir et de vous ressourcer."
    ],
    neutral: [
      "Votre √©tat √©motionnel semble √©quilibr√©. C'est une base stable pour construire votre journ√©e.",
      "Cette neutralit√© peut √™tre apaisante. Parfois, la simplicit√© du moment pr√©sent suffit.",
      "Votre expression reste mesur√©e. Cette stabilit√© √©motionnelle est pr√©cieuse."
    ]
  };

  const emotionInsights = insights[emotion as keyof typeof insights] || insights.neutral;
  const randomInsight = emotionInsights[Math.floor(Math.random() * emotionInsights.length)];
  
  if (confidence > 0.8) {
    return randomInsight;
  } else {
    return `${randomInsight} (Analyse pr√©liminaire - n'h√©sitez pas √† pr√©ciser votre ressenti)`;
  }
}

function generateRecommendations(emotion: string, intensity: number): string[] {
  const recommendations = {
    happy: [
      "Partagez cette belle √©nergie avec vos proches",
      "√âcoutez de la musique qui amplifie cette joie",
      "Profitez-en pour vous lancer dans un projet cr√©atif",
      "Savourez ce moment et ancrez-le dans votre m√©moire"
    ],
    calm: [
      "Maintenez cette s√©r√©nit√© avec quelques respirations profondes",
      "Une musique douce pour accompagner ce calme",
      "Moment id√©al pour de la m√©ditation ou de la lecture",
      "Profitez de cette paix pour vous reconnecter √† vous-m√™me"
    ],
    energetic: [
      "Canalisez cette √©nergie dans une activit√© physique",
      "Musique rythm√©e pour accompagner votre dynamisme",
      "C'est le moment parfait pour tackle vos d√©fis",
      "Utilisez cette force pour avancer sur vos projets"
    ],
    focused: [
      "Maintenez cette concentration avec un environnement adapt√©",
      "Musique instrumentale pour soutenir votre focus",
      "Planifiez vos t√¢ches importantes maintenant",
      "√âliminez les distractions pour optimiser cette clart√©"
    ],
    sad: [
      "Accordez-vous de la douceur et de la compr√©hension",
      "Musique apaisante pour accompagner cette √©motion",
      "Parlez √† quelqu'un de confiance si vous le souhaitez",
      "Rappelez-vous que cette tristesse est temporaire"
    ],
    anxious: [
      "Pratiquez des respirations lentes et profondes",
      "Musique relaxante pour apaiser votre syst√®me nerveux",
      "Essayez une courte m√©ditation guid√©e",
      "Identifiez une action concr√®te pour r√©duire votre stress"
    ],
    angry: [
      "Prenez quelques minutes pour vous calmer avant d'agir",
      "√âvacuez cette tension par l'exercice physique",
      "Exprimez cette col√®re de mani√®re constructive",
      "Cherchez la le√ßon cach√©e derri√®re cette frustration"
    ],
    tired: [
      "Accordez-vous une vraie pause r√©cup√©ratrice",
      "Musique douce ou sons de la nature pour vous apaiser",
      "Planifiez un moment de repos de qualit√©",
      "Hydratez-vous et nourrissez-vous sainement"
    ],
    neutral: [
      "C'est un bon moment pour faire le point sur vos besoins",
      "Explorez diff√©rents types de musique pour √©veiller vos √©motions",
      "Profitez de cette stabilit√© pour planifier votre journ√©e",
      "Restez ouvert(e) aux opportunit√©s qui se pr√©sentent"
    ]
  };

  const emotionRecs = recommendations[emotion as keyof typeof recommendations] || recommendations.neutral;
  
  // Return 3-4 recommendations based on intensity
  const numRecs = intensity > 0.7 ? 4 : 3;
  return emotionRecs.slice(0, numRecs);
}