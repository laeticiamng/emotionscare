// @ts-nocheck
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface MeditationRequest {
  theme: string;
  duration: number;
  voice?: string;
  language?: string;
  includeAudio?: boolean;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return new Response(JSON.stringify({ error: 'Non autoris√©' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const body: MeditationRequest = await req.json();
    const { theme, duration, voice = 'alloy', language = 'fr', includeAudio = true } = body;

    console.log('üßò Generating guided meditation:', { user_id: user.id, theme, duration, voice });

    // G√©n√©rer le script de m√©ditation avec AI
    const script = await generateMeditationScript(theme, duration, language);

    let audioUrl = null;
    let audioBase64 = null;

    // G√©n√©rer l'audio si demand√©
    if (includeAudio && Deno.env.get('OPENAI_API_KEY')) {
      console.log('üéôÔ∏è Generating audio...');
      audioBase64 = await generateSpeech(script.fullText, voice);
    }

    // Sauvegarder dans la base de donn√©es
    const { data: meditation, error: insertError } = await supabase
      .from('guided_meditations')
      .insert({
        user_id: user.id,
        title: script.title,
        theme,
        duration,
        script: script.sections,
        full_text: script.fullText,
        voice_type: voice,
        audio_url: audioUrl,
        language,
        benefits: script.benefits,
        difficulty: script.difficulty,
        metadata: {
          word_count: script.wordCount,
          sections_count: script.sections.length,
          generated_at: new Date().toISOString(),
        }
      })
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå Error saving meditation:', insertError);
      throw insertError;
    }

    // Cr√©er des analytics
    await supabase.from('meditation_analytics').insert({
      user_id: user.id,
      meditation_id: meditation.id,
      action: 'generated',
      duration_seconds: 0,
    });

    console.log('‚úÖ Guided meditation generated:', meditation.id);

    return new Response(
      JSON.stringify({
        meditation,
        audioContent: audioBase64,
        message: 'M√©ditation guid√©e g√©n√©r√©e avec succ√®s',
        tips: generateTips(theme),
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error: any) {
    console.error('‚ùå Error:', error);
    return new Response(
      JSON.stringify({ error: error?.message || 'Erreur interne' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});

async function generateMeditationScript(theme: string, duration: number, language: string) {
  const openAIKey = Deno.env.get('OPENAI_API_KEY');
  
  if (!openAIKey) {
    // Fallback: script pr√©-g√©n√©r√©
    return generateFallbackScript(theme, duration, language);
  }

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Tu es un expert en m√©ditation guid√©e. G√©n√®re un script de m√©ditation en ${language} sur le th√®me "${theme}" d'une dur√©e d'environ ${duration} secondes. Le script doit √™tre apaisant, progressif et structur√© en sections (introduction, corps, conclusion). Inclus des pauses naturelles marqu√©es par [...].`
          },
          {
            role: 'user',
            content: `Cr√©e une m√©ditation guid√©e de ${duration} secondes sur le th√®me: ${theme}`
          }
        ],
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error('OpenAI API error');
    }

    const data = await response.json();
    const generatedText = data.choices[0].message.content;

    return parseScriptToSections(generatedText, theme, duration);
  } catch (error) {
    console.error('‚ö†Ô∏è AI generation failed, using fallback:', error);
    return generateFallbackScript(theme, duration, language);
  }
}

function parseScriptToSections(text: string, theme: string, duration: number) {
  const sections = [
    {
      title: 'Introduction',
      content: text.split('\n\n')[0] || 'Installez-vous confortablement...',
      duration: Math.floor(duration * 0.2),
    },
    {
      title: 'Corps de m√©ditation',
      content: text.split('\n\n').slice(1, -1).join('\n\n') || 'Respirez profond√©ment...',
      duration: Math.floor(duration * 0.6),
    },
    {
      title: 'Conclusion',
      content: text.split('\n\n').slice(-1)[0] || 'Revenez doucement √† votre respiration...',
      duration: Math.floor(duration * 0.2),
    },
  ];

  return {
    title: `M√©ditation ${theme}`,
    sections,
    fullText: text,
    wordCount: text.split(' ').length,
    benefits: getBenefits(theme),
    difficulty: duration < 300 ? 'd√©butant' : duration < 600 ? 'interm√©diaire' : 'avanc√©',
  };
}

function generateFallbackScript(theme: string, duration: number, language: string) {
  const scripts: Record<string, string> = {
    relaxation: `Installez-vous confortablement, le dos droit, les √©paules d√©tendues. [...] Fermez doucement les yeux. [...] Portez votre attention sur votre respiration naturelle. [...] Inspirez profond√©ment par le nez, comptez jusqu'√† 4. [...] Retenez votre souffle pendant 4 temps. [...] Expirez lentement par la bouche pendant 6 temps. [...] Sentez les tensions se dissoudre √† chaque expiration. [...] Votre corps devient de plus en plus lourd et d√©tendu. [...] Continuez √† respirer √† votre rythme. [...] Quand vous √™tes pr√™t, ouvrez doucement les yeux.`,
    stress: `Prenez conscience de votre corps dans l'instant pr√©sent. [...] Identifiez les zones de tension. [...] Respirez profond√©ment, en dirigeant votre souffle vers ces zones. [...] √Ä chaque expiration, rel√¢chez la tension. [...] Visualisez le stress qui s'√©vacue comme une fum√©e. [...] Vous √™tes en s√©curit√©, tout va bien. [...] Revenez progressivement √† votre environnement.`,
    sommeil: `Allongez-vous confortablement. [...] Sentez votre corps s'enfoncer dans le matelas. [...] Rel√¢chez vos pieds, vos jambes, votre bassin. [...] D√©tendez vos √©paules, vos bras, vos mains. [...] Rel√¢chez votre visage, votre m√¢choire. [...] Votre respiration devient de plus en plus lente et profonde. [...] Laissez-vous glisser doucement vers le sommeil.`,
    focus: `Asseyez-vous dans une position stable et confortable. [...] Ancrez votre attention sur votre respiration. [...] Quand votre esprit divague, ramenez-le gentiment. [...] Concentrez-vous sur les sensations pr√©sentes. [...] D√©veloppez votre clart√© mentale. [...] Vous √™tes calme et focalis√©.`,
    gratitude: `Pensez √† trois choses pour lesquelles vous √™tes reconnaissant aujourd'hui. [...] Ressentez la chaleur de la gratitude dans votre c≈ìur. [...] Laissez cette sensation se propager dans tout votre corps. [...] Appr√©ciez ce moment de paix et de reconnaissance.`,
  };

  const text = scripts[theme] || scripts.relaxation;
  return parseScriptToSections(text, theme, duration);
}

async function generateSpeech(text: string, voice: string): Promise<string | null> {
  const openAIKey = Deno.env.get('OPENAI_API_KEY');
  if (!openAIKey) return null;

  try {
    // Limiter le texte pour √©viter les timeouts
    const limitedText = text.substring(0, 4000);

    const response = await fetch('https://api.openai.com/v1/audio/speech', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'tts-1',
        input: limitedText,
        voice: voice,
        response_format: 'mp3',
        speed: 0.9, // Vitesse l√©g√®rement r√©duite pour m√©ditation
      }),
    });

    if (!response.ok) {
      console.error('‚ùå TTS API error:', response.status);
      return null;
    }

    const arrayBuffer = await response.arrayBuffer();
    const base64Audio = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
    
    return base64Audio;
  } catch (error) {
    console.error('‚ùå Error generating speech:', error);
    return null;
  }
}

function getBenefits(theme: string): string[] {
  const benefitsMap: Record<string, string[]> = {
    relaxation: ['R√©duit le stress', 'Am√©liore le sommeil', 'Calme le syst√®me nerveux'],
    stress: ['Diminue l\'anxi√©t√©', 'Am√©liore la r√©silience', 'R√©gule les √©motions'],
    sommeil: ['Facilite l\'endormissement', 'Am√©liore la qualit√© du sommeil', 'R√©duit les insomnies'],
    focus: ['Am√©liore la concentration', 'Augmente la productivit√©', 'Clarifie les pens√©es'],
    gratitude: ['Am√©liore l\'humeur', 'Renforce les relations', 'Augmente le bonheur'],
  };

  return benefitsMap[theme] || ['Favorise le bien-√™tre', 'R√©duit le stress', 'Am√©liore la pleine conscience'];
}

function generateTips(theme: string): string[] {
  return [
    'Trouvez un endroit calme et sans distractions',
    'Utilisez des √©couteurs pour une meilleure immersion',
    'Pratiquez r√©guli√®rement pour de meilleurs r√©sultats',
    'Ne vous jugez pas si votre esprit divague',
    'Commencez par des sessions courtes et augmentez progressivement',
  ];
}
