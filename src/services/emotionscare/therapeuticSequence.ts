// @ts-nocheck

// Parcours th√©rapeutique progressif EmotionsCare
import { EmotionInput, ANALGESIC_ROUTER } from './analgesic';
import { PRESETS } from './presets';
import { SunoApiClient } from './sunoClient';

export interface TherapeuticStep {
  preset: string;
  tempo: number;
  duration: number; // en secondes
  description: string;
}

export interface TherapeuticSequence {
  steps: TherapeuticStep[];
  totalDuration: number;
  startEmotion: string;
  targetEmotion: string;
}

// D√©finir les chemins th√©rapeutiques par √©motion de d√©part
const THERAPEUTIC_PATHS: Record<string, string[]> = {
  sad: ["sad melancholic", "bittersweet nostalgic", "hopeful uplifting", "joyful upbeat"],
  anger: ["angry frustrated", "bittersweet nostalgic", "hopeful uplifting", "optimistic uplifting"],
  fear: ["fearful anxious", "lonely isolated", "hopeful uplifting", "confident empowered"],
  anxious: ["anxious worried", "serene peaceful", "hopeful uplifting", "joyful upbeat"],
  pain: ["serene peaceful", "bittersweet nostalgic", "hopeful uplifting", "optimistic uplifting"],
  neutral: ["serene peaceful", "hopeful uplifting", "joyful upbeat", "optimistic uplifting"]
};

export function createTherapeuticSequence(startEmotion: string): TherapeuticSequence {
  const emotionKey = startEmotion.toLowerCase();
  const path = THERAPEUTIC_PATHS[emotionKey] || THERAPEUTIC_PATHS.neutral;
  
  const steps: TherapeuticStep[] = path.map((presetTag, index) => ({
    preset: presetTag,
    tempo: 65 + (index * 5), // Progression 65‚Üí80 BPM
    duration: index === 0 ? 30 : 60, // Premi√®re √©tape courte, puis 60s chacune
    description: getStepDescription(presetTag, index)
  }));
  
  return {
    steps,
    totalDuration: steps.reduce((sum, step) => sum + step.duration, 0),
    startEmotion: path[0],
    targetEmotion: path[path.length - 1]
  };
}

function getStepDescription(presetTag: string, stepIndex: number): string {
  const descriptions = [
    "Accueil et reconnaissance de l'√©motion",
    "Transition douce vers l'apaisement",
    "√âmergence de l'espoir et du r√©confort",
    "Ancrage dans un √©tat positif stable"
  ];
  return descriptions[stepIndex] || "√âtape th√©rapeutique";
}

export async function generateTherapeuticSequence(
  text: string,
  language: "Fran√ßais" | "English" = "Fran√ßais",
  callBackUrl?: string
): Promise<{ taskId: string; sequence: TherapeuticSequence }> {
  
  console.log(`üéµ EmotionsCare S√©quence: G√©n√©ration parcours pour: "${text.slice(0, 50)}..."`);
  
  try {
    // 1. D√©tecter l'√©motion de d√©part
    const humeApiKey = process.env.HUME_API_KEY;
    if (!humeApiKey) {
      throw new Error('HUME_API_KEY not configured');
    }
    
    const { HumeClient } = await import('./humeClient');
    const hume = new HumeClient(humeApiKey);
    const emotions = await hume.detectEmotion(text);
    
    const startEmotion = emotions[0]?.name || "neutral";
    console.log(`üé≠ √âmotion de d√©part: ${startEmotion}`);
    
    // 2. Cr√©er la s√©quence th√©rapeutique
    const sequence = createTherapeuticSequence(startEmotion);
    console.log(`üìã S√©quence cr√©√©e: ${sequence.steps.length} √©tapes (${sequence.totalDuration}s)`);
    
    // 3. G√©n√©rer le premier morceau avec extension programm√©e
    const sunoApiKey = process.env.SUNO_API_KEY;
    if (!sunoApiKey) {
      throw new Error('SUNO_API_KEY not configured');
    }
    
    const suno = new SunoApiClient(sunoApiKey);
    const firstStep = sequence.steps[0];
    const firstPreset = PRESETS.find(p => p.tag === firstStep.preset);
    
    if (!firstPreset) {
      throw new Error(`Preset ${firstStep.preset} introuvable`);
    }
    
    // Prompt pour s√©quence √©volutive
    const sequencePrompt = `${language} | parcours th√©rapeutique √©volutif | ${firstPreset.style} | mood progression ${sequence.startEmotion} vers ${sequence.targetEmotion} | tempo ${firstStep.tempo} BPM progressif | dur√©e ${sequence.totalDuration}s`;
    
    console.log(`üìù Prompt s√©quence: "${sequencePrompt}"`);
    
    const musicResponse = await suno.generateMusic({
      prompt: sequencePrompt,
      style: firstPreset.style,
      title: `Parcours th√©rapeutique: ${sequence.startEmotion} ‚Üí ${sequence.targetEmotion}`,
      customMode: true,
      instrumental: true, // Instrumental pour concentration th√©rapeutique
      model: "V4_5",
      callBackUrl: callBackUrl || ""
    });
    
    console.log(`‚úÖ S√©quence th√©rapeutique g√©n√©r√©e - Task ID: ${musicResponse.taskId}`);
    console.log(`üìä Parcours: ${sequence.steps.map(s => s.preset).join(' ‚Üí ')}`);
    
    return {
      taskId: musicResponse.taskId,
      sequence
    };
    
  } catch (error) {
    console.error('‚ùå EmotionsCare S√©quence: Erreur de g√©n√©ration:', error);
    throw new Error(`G√©n√©ration s√©quence √©chou√©e: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}
