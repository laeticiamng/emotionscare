/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/optin/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accepte un consentement clinique pour l'utilisateur courant */
        post: operations["acceptConsent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/optin/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Révoque le consentement clinique actif de l'utilisateur */
        post: operations["revokeConsent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AcceptConsentInput: {
            /** @description Version du consentement */
            version: string;
            /**
             * @description Drapeaux de consentement supplémentaires
             * @default {}
             */
            scope: {
                [key: string]: boolean;
            };
        };
        RevokeConsentInput: {
            /** @description Motif optionnel de révocation */
            reason?: string;
        };
        AcceptConsentResponse: {
            /** @enum {string} */
            status: "accepted";
            /** Format: date-time */
            accepted_at: string;
            version: string;
        };
        RevokeConsentResponse: {
            /** @enum {string} */
            status: "revoked";
            /** Format: date-time */
            revoked_at: string | null;
        };
        ErrorResponse: {
            error: string;
        };
        RateLimitError: components["schemas"]["ErrorResponse"] & {
            message: string;
            /** Format: int32 */
            retry_after: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    acceptConsent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AcceptConsentInput"];
            };
        };
        responses: {
            /** @description Consentement actif confirmé */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcceptConsentResponse"];
                };
            };
            /** @description Jeton d'authentification manquant ou invalide */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Corps de requête invalide */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Trop de requêtes */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RateLimitError"];
                };
            };
            /** @description Erreur serveur lors de la création du consentement */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    revokeConsent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RevokeConsentInput"];
            };
        };
        responses: {
            /** @description Consentement révoqué */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RevokeConsentResponse"];
                };
            };
            /** @description Jeton d'authentification manquant ou invalide */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Corps de requête invalide */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Trop de requêtes */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RateLimitError"];
                };
            };
            /** @description Erreur serveur lors de la révocation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
