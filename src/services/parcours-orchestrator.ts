// @ts-nocheck

import { supabase } from '@/integrations/supabase/client';
import type { ParcoursPreset, ParcoursRun, ParcoursSegment } from '@/types/music/parcours';

export const AVAILABLE_PRESETS: Array<{ key: string; title: string; emotion: string; description: string }> = [
  { key: '00-universel-reset', title: 'Universel Reset ‚Üí √âquilibre', emotion: 'neutral', description: 'Retour au centre avec coh√©rence cardiaque' },
  { key: '01-panique-anxiete', title: 'Panique/Anxi√©t√© ‚Üí Calme', emotion: 'anxiety', description: 'Respiration 4/6 + grounding 5-4-3-2-1' },
  { key: '02-stress-overwhelm', title: 'Stress/Overwhelm ‚Üí D√©c√©l√©ration', emotion: 'stress', description: 'Tri des t√¢ches + recadrage' },
  { key: '03-rumination-culpabilite', title: 'Rumination ‚Üí Clart√©', emotion: 'rumination', description: 'D√©fusion cognitive + cr√©neau souci' },
  { key: '04-tristesse-deuil', title: 'Tristesse/Deuil ‚Üí Lumi√®re', emotion: 'sadness', description: 'Validation + activation comportementale' },
  { key: '05-apathie-demotivation', title: 'Apathie ‚Üí √âlan', emotion: 'apathy', description: 'Activation + intentions Si/Alors' },
  { key: '06-colere-irritabilite', title: 'Col√®re ‚Üí Assertivit√©', emotion: 'anger', description: 'STOP + DESC + relaxation progressive' },
  { key: '07-peur-anticipatoire', title: 'Peur/Phobie ‚Üí Tol√©rance', emotion: 'fear', description: 'Exposition gradu√©e + safe place' },
  { key: '08-honte-anxiete-sociale', title: 'Honte ‚Üí Auto-compassion', emotion: 'shame', description: 'Double standard + script social' },
  { key: '09-jalousie-envie', title: 'Jalousie ‚Üí Recentrage', emotion: 'jealousy', description: 'Restructuration + valeurs + gratitude' },
  { key: '10-solitude-isolement', title: 'Solitude ‚Üí Connexion', emotion: 'loneliness', description: 'Lettre √† un ami + plan micro-contact' },
  { key: '11-fatigue-mentale', title: 'Burnout ‚Üí Repos actif', emotion: 'burnout', description: 'Permission repos + scan profond' },
  { key: '12-hypersensibilite', title: 'Hypersensibilit√© ‚Üí Filtration', emotion: 'overstimulation', description: 'ACCEPT + cocon protecteur' },
  { key: '13-douleur-physique', title: 'Douleur ‚Üí Apaisement', emotion: 'pain', description: 'Recadrage + d√©placement perceptif' },
  { key: '14-manque-confiance', title: 'Manque confiance ‚Üí Assurance', emotion: 'insecurity', description: 'Croyances + preuves contraires' },
  { key: '15-perfectionnisme', title: 'Perfectionnisme ‚Üí Souplesse', emotion: 'perfectionism', description: 'Exp√©rimentation imparfaite + bambou' },
  { key: '16-nostalgie-melancolie', title: 'Nostalgie ‚Üí Douceur pr√©sente', emotion: 'nostalgia', description: 'Gratitude pr√©sent + pont temporel' },
  { key: '17-motivation-energie', title: 'Motivation ‚Üí Mouvement', emotion: 'motivation', description: 'Si/Alors + plan 10 minutes' },
  { key: '18-concentration-flow', title: 'Concentration ‚Üí Focus', emotion: 'focus', description: 'Pomodoro 10/2 + tunnel attentionnel' },
  { key: '19-amour-gratitude', title: 'Gratitude ‚Üí Expansion', emotion: 'gratitude', description: 'Journal gratitude + c≈ìur rayonnant' },
];

export async function createParcoursRun(
  presetKey: string,
  emotionState?: any
): Promise<{ runId: string; error?: string }> {
  try {
    console.log('üé≠ Cr√©ation parcours run:', presetKey);

    const { data, error } = await supabase.functions.invoke('parcours-xl-create', {
      body: {
        presetKey,
        emotionState: emotionState || {},
      }
    });

    if (error) throw error;
    if (!data?.runId) throw new Error('No runId returned');

    console.log('‚úÖ Run cr√©√©e:', data.runId);
    return { runId: data.runId };

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation parcours:', error);
    return {
      runId: '',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    };
  }
}

export async function getParcoursRun(runId: string): Promise<ParcoursRun | null> {
  try {
    const { data: run, error: runError } = await supabase
      .from('parcours_runs')
      .select('*')
      .eq('id', runId)
      .single();

    if (runError) throw runError;

    const { data: segments, error: segmentsError } = await supabase
      .from('parcours_segments')
      .select('*')
      .eq('run_id', runId)
      .order('segment_index', { ascending: true });

    if (segmentsError) throw segmentsError;

    return {
      ...run,
      segments: segments || []
    } as ParcoursRun;

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration run:', error);
    return null;
  }
}

export async function updateRunStatus(
  runId: string,
  status: string,
  metadata?: any
): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('parcours_runs')
      .update({
        status,
        metadata,
        ...(status === 'completed' && { ended_at: new Date().toISOString() })
      })
      .eq('id', runId);

    return !error;
  } catch (error) {
    console.error('‚ùå Erreur update run:', error);
    return false;
  }
}

export async function saveParcoursJournal(
  runId: string,
  notes: string,
  sudsEnd?: number
): Promise<boolean> {
  try {
    const notesEncrypted = btoa(notes);

    const { error } = await supabase
      .from('parcours_runs')
      .update({
        notes_encrypted: notesEncrypted,
        suds_end: sudsEnd,
        ended_at: new Date().toISOString(),
        status: 'completed'
      })
      .eq('id', runId);

    return !error;
  } catch (error) {
    console.error('‚ùå Erreur sauvegarde journal:', error);
    return false;
  }
}
