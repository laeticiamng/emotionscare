
#!/usr/bin/env node

/**
 * Script de nettoyage forc√© pour r√©soudre les probl√®mes d'int√©grit√© de cache
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üö® Nettoyage forc√© en cours...');

// Variables d'environnement pour √©viter les binaires lourds
process.env.CYPRESS_INSTALL_BINARY = '0';
process.env.CYPRESS_SKIP_BINARY_INSTALL = '1';
process.env.HUSKY_SKIP_INSTALL = '1';
process.env.PUPPETEER_SKIP_DOWNLOAD = '1';
process.env.NODE_OPTIONS = '--max-old-space-size=4096';

try {
  // Supprimer tous les caches et fichiers de lock
  console.log('üßπ Suppression compl√®te des caches...');
  
  if (fs.existsSync('node_modules')) {
    execSync('rm -rf node_modules', { stdio: 'inherit' });
    console.log('‚úÖ node_modules supprim√©');
  }
  
  if (fs.existsSync('bun.lockb')) {
    fs.unlinkSync('bun.lockb');
    console.log('‚úÖ bun.lockb supprim√©');
  }
  
  if (fs.existsSync('package-lock.json')) {
    fs.unlinkSync('package-lock.json');
    console.log('‚úÖ package-lock.json supprim√©');
  }
  
  if (fs.existsSync('yarn.lock')) {
    fs.unlinkSync('yarn.lock');
    console.log('‚úÖ yarn.lock supprim√©');
  }
  
  // Nettoyer les caches npm et bun
  try {
    execSync('npm cache clean --force', { stdio: 'pipe' });
    console.log('‚úÖ Cache npm nettoy√©');
  } catch (e) {
    console.log('‚ö†Ô∏è Impossible de nettoyer le cache npm');
  }
  
  try {
    execSync('bun pm cache rm', { stdio: 'pipe' });
    console.log('‚úÖ Cache bun nettoy√©');
  } catch (e) {
    console.log('‚ö†Ô∏è Impossible de nettoyer le cache bun');
  }
  
  // Cr√©er un nouveau .npmrc sans @vitest/browser
  const npmrcContent = `
# Configuration pour √©viter les probl√®mes d'int√©grit√©
cypress_install_binary=0
cypress_skip_binary_install=1
husky_skip_install=1
puppeteer_skip_download=1

# Optimisations r√©seau strictes
prefer-offline=false
fund=false
audit=false
loglevel=error
progress=false

# D√©pendances
legacy-peer-deps=true
auto-install-peers=true
strict-peer-dependencies=false

# Timeouts courts pour fail-fast
network-timeout=120000
fetch-retry-mintimeout=10000
fetch-retry-maxtimeout=30000
fetch-retries=3

# Forcer une nouvelle r√©solution
package-lock=false
`.trim();
  
  fs.writeFileSync('.npmrc', npmrcContent);
  console.log('‚úÖ .npmrc recr√©√© avec configuration stricte');
  
  // Installation avec npm uniquement (√©viter bun pour ce probl√®me)
  console.log('üì¶ Installation avec npm (√©vitement de bun)...');
  execSync('npm install --no-package-lock --legacy-peer-deps', {
    stdio: 'inherit',
    env: { ...process.env }
  });
  
  console.log('üéâ Installation r√©ussie !');
  console.log('üöÄ Vous pouvez maintenant lancer: npm run dev');
  
} catch (error) {
  console.error('‚ùå Erreur lors du nettoyage forc√©:', error.message);
  
  console.log('\nüîß Solution alternative manuelle:');
  console.log('1. Supprimez manuellement le dossier ~/.bun/install/cache');
  console.log('2. Relancez: bun install');
  console.log('3. Ou utilisez: npm install --legacy-peer-deps');
  
  process.exit(1);
}
