
import { EmotionResult } from '@/types';

export const analyzeEmotion = async (text: string): Promise<EmotionResult> => {
  // This is a mock function that simulates API call
  // In production, this would make a call to your emotion analysis API
  return new Promise((resolve) => {
    setTimeout(() => {
      // Simulating an API response
      const emotionResult: EmotionResult = {
        id: `emotion-${new Date().getTime()}`,
        date: new Date().toISOString(),
        emotion: detectMockEmotion(text),
        confidence: 0.85,
        text: text,
        ai_feedback: generateMockFeedback(text),
        recommendations: generateMockRecommendations(),
        emojis: ['ðŸ˜Š', 'ðŸ™‚', 'ðŸ¤”']
      };
      resolve(emotionResult);
    }, 1000); // Simulating 1 second API delay
  });
};

export const analyzeFacialEmotion = async (imageData: string): Promise<EmotionResult> => {
  // This is a mock function that simulates API call for facial emotion detection
  return new Promise((resolve) => {
    setTimeout(() => {
      // Simulating an API response
      const emotionResult: EmotionResult = {
        id: `facial-${new Date().getTime()}`,
        date: new Date().toISOString(),
        emotion: mockRandomEmotion(),
        confidence: 0.78,
        ai_feedback: "Votre expression faciale indique une Ã©motion claire.",
        recommendations: generateMockRecommendations(),
      };
      resolve(emotionResult);
    }, 1500); // Simulating 1.5 second API delay
  });
};

export const analyzeVoiceEmotion = async (audioUrl: string): Promise<EmotionResult> => {
  // This is a mock function that simulates API call for voice emotion detection
  return new Promise((resolve) => {
    setTimeout(() => {
      // Simulating an API response
      const emotionResult: EmotionResult = {
        id: `voice-${new Date().getTime()}`,
        date: new Date().toISOString(),
        emotion: mockRandomEmotion(),
        confidence: 0.72,
        audio_url: audioUrl,
        transcript: "C'est un exemple de transcription pour cette analyse vocale.",
        ai_feedback: "L'intonation de votre voix rÃ©vÃ¨le votre Ã©tat Ã©motionnel actuel.",
        recommendations: generateMockRecommendations(),
      };
      resolve(emotionResult);
    }, 2000); // Simulating 2 second API delay
  });
};

// Helper functions for the mock implementations
function detectMockEmotion(text: string): string {
  const text_lower = text.toLowerCase();
  
  if (text_lower.includes('heureux') || text_lower.includes('content') || text_lower.includes('bien')) {
    return 'joie';
  } else if (text_lower.includes('triste') || text_lower.includes('dÃ©primÃ©') || text_lower.includes('mal')) {
    return 'tristesse';
  } else if (text_lower.includes('peur') || text_lower.includes('inquiet') || text_lower.includes('stress')) {
    return 'anxiÃ©tÃ©';
  } else if (text_lower.includes('colÃ¨re') || text_lower.includes('Ã©nervÃ©') || text_lower.includes('frustrÃ©')) {
    return 'colÃ¨re';
  } else if (text_lower.includes('surpris') || text_lower.includes('choc')) {
    return 'surprise';
  } else {
    return 'neutre';
  }
}

function generateMockFeedback(text: string): string {
  const emotion = detectMockEmotion(text);
  
  switch(emotion) {
    case 'joie':
      return "Votre Ã©tat de joie est bÃ©nÃ©fique pour votre bien-Ãªtre. Continuez Ã  cultiver ces moments positifs.";
    case 'tristesse':
      return "La tristesse est une Ã©motion naturelle. Prenez le temps de l'accueillir tout en prenant soin de vous.";
    case 'anxiÃ©tÃ©':
      return "Votre anxiÃ©tÃ© peut Ãªtre apaisÃ©e par des techniques de respiration et de pleine conscience.";
    case 'colÃ¨re':
      return "La colÃ¨re vous signale un besoin non satisfait. Essayez d'identifier ce besoin pour mieux y rÃ©pondre.";
    case 'surprise':
      return "La surprise peut Ãªtre une opportunitÃ© d'apprentissage et d'ouverture Ã  de nouvelles perspectives.";
    default:
      return "Votre Ã©tat Ã©motionnel semble Ã©quilibrÃ©. C'est un bon moment pour pratiquer la pleine conscience.";
  }
}

function generateMockRecommendations(): string[] {
  const allRecommendations = [
    "Pratiquez 5 minutes de respiration profonde",
    "Ã‰coutez une musique relaxante",
    "Faites une courte marche Ã  l'extÃ©rieur",
    "Notez 3 choses pour lesquelles vous Ãªtes reconnaissant",
    "Prenez une pause mÃ©ditative de 2 minutes",
    "Ã‰tirez-vous pendant quelques minutes",
    "Buvez un verre d'eau et hydratez-vous",
    "Contactez un ami ou un proche",
    "Ã‰crivez vos pensÃ©es dans votre journal",
    "Visualisez un lieu paisible pendant 3 minutes"
  ];
  
  // Select 3 random recommendations
  const shuffled = [...allRecommendations].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, 3);
}

function mockRandomEmotion(): string {
  const emotions = ['joie', 'tristesse', 'anxiÃ©tÃ©', 'colÃ¨re', 'surprise', 'neutre', 'calme'];
  return emotions[Math.floor(Math.random() * emotions.length)];
}
