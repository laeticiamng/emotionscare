import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface CoachingRequest {
  message: string;
  userId: string;
  sessionId?: string;
  coachType: 'therapist' | 'wellness' | 'mindfulness' | 'general';
  userProfile?: {
    mood?: string;
    stressLevel?: number;
    goals?: string[];
    preferences?: string[];
  };
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? ''
    );

    const { 
      message, 
      userId, 
      sessionId, 
      coachType = 'general',
      userProfile = {}
    }: CoachingRequest = await req.json();
    
    console.log('ü§ñ Coaching IA demand√©:', { userId, coachType, sessionId });

    // R√©cup√©ration de l'historique de conversation si sessionId fourni
    let conversationHistory: any[] = [];
    if (sessionId) {
      const { data: messages } = await supabase
        .from('chat_messages')
        .select('*')
        .eq('conversation_id', sessionId)
        .order('timestamp', { ascending: true })
        .limit(10); // Limiter √† 10 derniers messages pour le contexte

      conversationHistory = messages || [];
    }

    // Construction du prompt syst√®me selon le type de coach
    const coachPrompts = {
      therapist: `Tu es un psychoth√©rapeute bienveillant et exp√©riment√© sp√©cialis√© dans le bien-√™tre √©motionnel. 
Tu utilises des techniques de th√©rapie cognitivo-comportementale (TCC) et de pleine conscience.
Ton approche est empathique, non-directive et ax√©e sur l'autonomisation du patient.`,
      
      wellness: `Tu es un coach en bien-√™tre holistique sp√©cialis√© dans l'√©quilibre vie-travail et la gestion du stress.
Tu proposes des solutions pratiques et des habitudes de vie saines.
Ton approche est motivante, positive et ax√©e sur l'action.`,
      
      mindfulness: `Tu es un guide de m√©ditation et de pleine conscience exp√©riment√©.
Tu enseignes des techniques de respiration, de m√©ditation et de pr√©sence √† l'instant.
Ton approche est douce, contemplative et centr√©e sur la conscience corporelle.`,
      
      general: `Tu es un assistant IA bienveillant sp√©cialis√© dans le soutien √©motionnel et le bien-√™tre mental.
Tu combines empathie, connaissances en psychologie positive et conseils pratiques.
Ton approche est adaptative selon les besoins exprim√©s.`
    };

    const systemPrompt = `${coachPrompts[coachType]}

CONTEXTE UTILISATEUR:
- Humeur actuelle: ${userProfile.mood || 'Non sp√©cifi√©e'}
- Niveau de stress: ${userProfile.stressLevel || 'Non √©valu√©'}/10
- Objectifs: ${userProfile.goals?.join(', ') || 'Non d√©finis'}
- Pr√©f√©rences: ${userProfile.preferences?.join(', ') || 'Non sp√©cifi√©es'}

INSTRUCTIONS:
1. R√©ponds toujours en fran√ßais avec bienveillance et empathie
2. Adapte ton langage au niveau √©motionnel d√©tect√©
3. Propose des techniques concr√®tes et applicables imm√©diatement
4. Si tu d√©tectes une d√©tresse importante, encourage la consultation professionnelle
5. Garde tes r√©ponses concises mais substantielles (200-400 mots)
6. Termine par une question ouverte ou un exercice pratique quand appropri√©
7. Ne donne jamais de diagnostic m√©dical ou de conseils m√©dicaux sp√©cifiques

RESSOURCES √Ä PROPOSER:
- Exercices de respiration (4-7-8, coh√©rence cardiaque)
- Techniques de grounding (5-4-3-2-1, ancrage corporel)
- Affirmations positives personnalis√©es
- Micro-m√©ditations (1-3 minutes)
- Restructuration cognitive simple
- Hygi√®ne de vie (sommeil, nutrition, activit√© physique)`;

    // Pr√©paration des messages pour l'IA
    const messages = [
      { role: 'system', content: systemPrompt }
    ];

    // Ajout de l'historique (si disponible)
    conversationHistory.forEach(msg => {
      messages.push({
        role: msg.sender === 'user' ? 'user' : 'assistant',
        content: msg.text
      });
    });

    // Ajout du message actuel
    messages.push({ role: 'user', content: message });

    console.log('üìù Prompt syst√®me configur√© pour:', coachType);

    // Appel √† l'IA
    const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY non configur√©e');
    }

    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages,
        temperature: 0.7,
        max_tokens: 800,
        presence_penalty: 0.1,
        frequency_penalty: 0.1
      }),
    });

    if (!aiResponse.ok) {
      throw new Error(`Erreur IA Coach: ${await aiResponse.text()}`);
    }

    const aiData = await aiResponse.json();
    const coachResponse = aiData.choices[0].message.content;

    console.log('üéØ R√©ponse g√©n√©r√©e par l\'IA Coach');

    // Gestion de la session de conversation
    let currentSessionId = sessionId;
    if (!currentSessionId) {
      // Cr√©er nouvelle conversation
      const { data: newConversation, error: convError } = await supabase
        .from('chat_conversations')
        .insert({
          user_id: userId,
          title: `Session ${coachType} - ${new Date().toLocaleDateString('fr-FR')}`,
          last_message: message.substring(0, 100)
        })
        .select()
        .single();

      if (convError) throw convError;
      currentSessionId = newConversation.id;
    }

    // Sauvegarder les messages
    const messagesToSave = [
      {
        conversation_id: currentSessionId,
        sender: 'user',
        text: message,
        timestamp: new Date().toISOString()
      },
      {
        conversation_id: currentSessionId,
        sender: 'coach',
        text: coachResponse,
        timestamp: new Date().toISOString()
      }
    ];

    const { error: msgError } = await supabase
      .from('chat_messages')
      .insert(messagesToSave);

    if (msgError) {
      console.error('‚ö†Ô∏è Erreur sauvegarde messages:', msgError);
    }

    // Mise √† jour de la derni√®re activit√© de conversation
    await supabase
      .from('chat_conversations')
      .update({
        last_message: coachResponse.substring(0, 100),
        updated_at: new Date().toISOString()
      })
      .eq('id', currentSessionId);

    // Analyse du sentiment de la r√©ponse pour tracking
    let responseAnalysis = null;
    try {
      const sentimentResponse = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Analyse le sentiment et les techniques th√©rapeutiques sugg√©r√©es dans cette r√©ponse de coaching. R√©ponds en JSON avec: {"techniques": ["tech1", "tech2"], "sentiment": "positif|neutre|pr√©occupant", "urgency": 1-5}'
            },
            {
              role: 'user',
              content: `Message utilisateur: "${message}"\n\nR√©ponse coach: "${coachResponse}"`
            }
          ],
          temperature: 0.2,
          max_tokens: 200
        }),
      });

      if (sentimentResponse.ok) {
        const sentimentData = await sentimentResponse.json();
        try {
          responseAnalysis = JSON.parse(sentimentData.choices[0].message.content);
        } catch (e) {
          console.warn('Erreur parsing analyse sentiment');
        }
      }
    } catch (e) {
      console.warn('Erreur analyse sentiment:', e.message);
    }

    console.log('‚úÖ Session de coaching compl√©t√©e:', currentSessionId);

    return new Response(JSON.stringify({
      success: true,
      response: coachResponse,
      sessionId: currentSessionId,
      coachType,
      analysis: responseAnalysis,
      suggestions: {
        nextTopics: [
          'Comment vous sentez-vous apr√®s cet √©change ?',
          'Y a-t-il un aspect sp√©cifique que vous aimeriez approfondir ?',
          'Souhaitez-vous que je vous guide dans un exercice pratique ?'
        ],
        resources: [
          'Exercice de respiration guid√©e',
          'M√©ditation courte adapt√©e',
          'Techniques de gestion du stress'
        ]
      },
      message: 'Coaching IA compl√©t√© avec succ√®s'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Erreur dans ai-coach:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      details: 'Erreur lors du coaching IA'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});