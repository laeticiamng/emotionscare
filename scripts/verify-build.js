
#!/usr/bin/env node

/**
 * Script de v√©rification de build apr√®s nettoyage
 */

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîç V√©rification de l\'environnement de build...');

// V√©rifier que les fichiers critiques existent
const criticalFiles = [
  'src/main.tsx',
  'src/App.tsx',
  'index.html',
  'vite.config.ts'
];

const missingFiles = criticalFiles.filter(file => !fs.existsSync(file));

if (missingFiles.length > 0) {
  console.error('‚ùå Fichiers critiques manquants:', missingFiles);
  process.exit(1);
}

// V√©rifier que vite est install√©
try {
  execSync('which vite || where vite', { stdio: 'ignore' });
  console.log('‚úÖ Vite trouv√©');
} catch (error) {
  console.log('‚ö†Ô∏è Vite non trouv√© globalement, v√©rification dans node_modules...');
  
  if (fs.existsSync('node_modules/.bin/vite')) {
    console.log('‚úÖ Vite trouv√© dans node_modules');
  } else {
    console.error('‚ùå Vite non trouv√©. Installer avec: bun add vite');
  }
}

// V√©rifier TypeScript
try {
  execSync('which tsc || where tsc', { stdio: 'ignore' });
  console.log('‚úÖ TypeScript trouv√©');
} catch (error) {
  if (fs.existsSync('node_modules/.bin/tsc')) {
    console.log('‚úÖ TypeScript trouv√© dans node_modules');
  } else {
    console.log('‚ö†Ô∏è TypeScript non trouv√©. Sera install√© automatiquement.');
  }
}

console.log('\nüéØ √âtapes suivantes apr√®s nettoyage du package.json :');
console.log('1. Ex√©cuter: bun install');
console.log('2. Ex√©cuter: bun run dev');
console.log('3. Si erreurs TypeScript persistent, ex√©cuter: bun add -D @types/react @types/react-dom');
