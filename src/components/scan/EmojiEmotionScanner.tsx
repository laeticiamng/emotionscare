
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { EmotionResult } from '@/types/emotion';
import { Loader2 } from 'lucide-react';
import { toast } from 'sonner';

interface EmojiEmotionScannerProps {
  onScanComplete: (result: EmotionResult) => void;
  onCancel: () => void;
  isProcessing: boolean;
  setIsProcessing: (processing: boolean) => void;
}

const EmojiEmotionScanner: React.FC<EmojiEmotionScannerProps> = ({
  onScanComplete,
  onCancel,
  isProcessing,
  setIsProcessing
}) => {
  const [selectedEmojis, setSelectedEmojis] = useState<string[]>([]);
  
  const emojiCategories = {
    joy: {
      label: 'Joie & Bonheur',
      emojis: ['üòä', 'üòÉ', 'üòÑ', 'üòÅ', 'ü•∞', 'üòç', 'ü§ó', 'üéâ', '‚ú®', 'üåü']
    },
    calm: {
      label: 'Calme & S√©r√©nit√©',
      emojis: ['üòå', 'üòá', 'üßò‚Äç‚ôÄÔ∏è', 'üßò‚Äç‚ôÇÔ∏è', 'üò¥', 'üí§', 'üå∏', 'üçÉ', '‚òÅÔ∏è', 'üïäÔ∏è']
    },
    sadness: {
      label: 'Tristesse',
      emojis: ['üò¢', 'üò≠', 'üòû', 'üòî', 'üòü', 'ü•∫', 'üíî', 'üò•', 'üò™', 'üåßÔ∏è']
    },
    anger: {
      label: 'Col√®re & Frustration',
      emojis: ['üò†', 'üò°', 'ü§¨', 'üò§', 'üí¢', 'üî•', '‚ö°', 'üòæ', 'üëø', 'üå™Ô∏è']
    },
    fear: {
      label: 'Peur & Anxi√©t√©',
      emojis: ['üò∞', 'üò®', 'üò±', 'ü´®', 'üòß', 'üò¶', 'üôà', 'üíä', 'üåÄ', '‚ùó']
    },
    surprise: {
      label: 'Surprise',
      emojis: ['üòÆ', 'üòØ', 'üò≤', 'ü§Ø', 'üò≥', 'ü´¢', 'üéä', 'üí•', '‚ú®', 'üéÅ']
    },
    love: {
      label: 'Amour & Affection',
      emojis: ['‚ù§Ô∏è', 'üíï', 'üíñ', 'üíó', 'üíù', 'üòò', 'ü•∞', 'üíë', 'üë®‚Äç‚ù§Ô∏è‚Äçüë©', 'üåπ']
    }
  };
  
  const handleEmojiClick = (emoji: string) => {
    setSelectedEmojis(prev => {
      if (prev.includes(emoji)) {
        return prev.filter(e => e !== emoji);
      } else if (prev.length < 5) {
        return [...prev, emoji];
      } else {
        toast.error('Maximum 5 √©mojis s√©lectionn√©s');
        return prev;
      }
    });
  };
  
  const analyzeEmojis = async () => {
    if (selectedEmojis.length === 0) {
      toast.error('Veuillez s√©lectionner au moins un √©moji');
      return;
    }
    
    setIsProcessing(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Analyser les √©mojis s√©lectionn√©s
      const emotionMapping = {
        'üòä': 'joy', 'üòÉ': 'joy', 'üòÑ': 'joy', 'üòÅ': 'joy', 'ü•∞': 'love', 'üòç': 'love',
        'üòå': 'calm', 'üòá': 'calm', 'üßò‚Äç‚ôÄÔ∏è': 'calm', 'üßò‚Äç‚ôÇÔ∏è': 'calm',
        'üò¢': 'sadness', 'üò≠': 'sadness', 'üòû': 'sadness', 'üòî': 'sadness',
        'üò†': 'anger', 'üò°': 'anger', 'ü§¨': 'anger', 'üò§': 'anger',
        'üò∞': 'fear', 'üò®': 'fear', 'üò±': 'fear', 'üòß': 'fear',
        'üòÆ': 'surprise', 'üòØ': 'surprise', 'üò≤': 'surprise', 'ü§Ø': 'surprise'
      };
      
      // Compter les √©motions
      const emotionCounts = {};
      selectedEmojis.forEach(emoji => {
        const emotion = emotionMapping[emoji] || 'calm';
        emotionCounts[emotion] = (emotionCounts[emotion] || 0) + 1;
      });
      
      // Trouver l'√©motion dominante
      const dominantEmotion = Object.keys(emotionCounts).reduce((a, b) => 
        emotionCounts[a] > emotionCounts[b] ? a : b
      );
      
      const intensity = Math.min(selectedEmojis.length / 5, 1);
      
      const result: EmotionResult = {
        emotion: dominantEmotion,
        intensity,
        source: 'emoji',
        score: Math.floor(intensity * 100),
        ai_feedback: generateEmojiFeedback(dominantEmotion, selectedEmojis),
        date: new Date().toISOString()
      };
      
      onScanComplete(result);
      toast.success('Analyse des √©mojis termin√©e');
    } catch (error) {
      console.error('Erreur lors de l\'analyse des √©mojis:', error);
      toast.error('Erreur lors de l\'analyse');
    } finally {
      setIsProcessing(false);
    }
  };
  
  const generateEmojiFeedback = (emotion: string, emojis: string[]): string => {
    const messages = {
      joy: 'Vos √©mojis refl√®tent un √©tat de joie et de bonheur ! C\'est merveilleux de vous sentir ainsi.',
      calm: 'Vos √©mojis expriment un √©tat de calme et de s√©r√©nit√©. Vous semblez en paix avec vous-m√™me.',
      sadness: 'Vos √©mojis refl√®tent de la tristesse. C\'est important de reconna√Ætre et d\'accepter ces sentiments.',
      anger: 'Vos √©mojis expriment de la col√®re ou de la frustration. Prenez le temps de respirer profond√©ment.',
      fear: 'Vos √©mojis montrent de l\'anxi√©t√© ou de la peur. Rappelez-vous que ces sentiments sont temporaires.',
      love: 'Vos √©mojis d√©bordent d\'amour et d\'affection. Continuez √† cultiver ces sentiments positifs.',
      surprise: 'Vos √©mojis expriment de la surprise ! Vous vivez peut-√™tre quelque chose d\'inattendu.'
    };
    
    return messages[emotion] || 'Vos √©mojis r√©v√®lent un m√©lange int√©ressant d\'√©motions.';
  };
  
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>S√©lection d'√©mojis</CardTitle>
          <CardDescription>
            Choisissez jusqu'√† 5 √©mojis qui repr√©sentent le mieux votre √©tat √©motionnel actuel
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {selectedEmojis.length > 0 && (
            <div className="p-4 bg-muted/20 rounded-md">
              <div className="text-sm font-medium mb-2">√âmojis s√©lectionn√©s ({selectedEmojis.length}/5) :</div>
              <div className="flex flex-wrap gap-2">
                {selectedEmojis.map((emoji, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => handleEmojiClick(emoji)}
                    className="text-2xl p-2 h-auto"
                  >
                    {emoji}
                  </Button>
                ))}
              </div>
            </div>
          )}
          
          <div className="space-y-4">
            {Object.entries(emojiCategories).map(([category, data]) => (
              <div key={category}>
                <h3 className="text-sm font-medium mb-2">{data.label}</h3>
                <div className="grid grid-cols-5 md:grid-cols-10 gap-2">
                  {data.emojis.map((emoji, index) => (
                    <Button
                      key={index}
                      variant={selectedEmojis.includes(emoji) ? "default" : "outline"}
                      size="sm"
                      onClick={() => handleEmojiClick(emoji)}
                      className="text-2xl p-2 h-auto aspect-square"
                      disabled={isProcessing}
                    >
                      {emoji}
                    </Button>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
      
      <div className="flex justify-between pt-4">
        <Button variant="outline" onClick={onCancel} disabled={isProcessing}>
          Annuler
        </Button>
        <Button 
          onClick={analyzeEmojis} 
          disabled={isProcessing || selectedEmojis.length === 0}
        >
          {isProcessing ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Analyse en cours...
            </>
          ) : (
            'Analyser mes √©mojis'
          )}
        </Button>
      </div>
    </div>
  );
};

export default EmojiEmotionScanner;
