
#!/usr/bin/env node

/**
 * Optimizes Bun installation without modifying package.json
 * - Configures environment variables
 * - Creates/updates .npmrc with optimal settings
 * - Provides diagnostic information if needed
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Optimizing Bun installation environment...');

// Optimization environment variables
process.env.CYPRESS_INSTALL_BINARY = '0';
process.env.CYPRESS_SKIP_BINARY_INSTALL = '1';
process.env.HUSKY_SKIP_INSTALL = '1';
process.env.PUPPETEER_SKIP_DOWNLOAD = '1';
process.env.NODE_OPTIONS = '--max-old-space-size=4096';

// Check for .npmrc and create/update it with optimal settings
const npmrcPath = path.join(process.cwd(), '.npmrc');
const requiredSettings = {
  'cypress_skip_binary_install': '1',
  'prefer-offline': 'true',
  'fund': 'false',
  'audit': 'false',
  'legacy-peer-deps': 'true',
  'fetch-retries': '5',
  'network-timeout': '300000'
};

let npmrcContent = '';
if (fs.existsSync(npmrcPath)) {
  npmrcContent = fs.readFileSync(npmrcPath, 'utf8');
  console.log('üìù Updating existing .npmrc file...');
} else {
  console.log('üìù Creating new .npmrc file...');
}

// Parse existing settings
const existingSettings = {};
npmrcContent.split('\n').forEach(line => {
  if (line && !line.startsWith('#')) {
    const [key, value] = line.split('=');
    if (key && value) {
      existingSettings[key.trim()] = value.trim();
    }
  }
});

// Update settings
let updatedSettings = { ...existingSettings };
for (const [key, value] of Object.entries(requiredSettings)) {
  updatedSettings[key] = value;
}

// Generate new .npmrc content
let newNpmrcContent = Object.entries(updatedSettings)
  .map(([key, value]) => `${key}=${value}`)
  .join('\n');

// Add comments for clarity
newNpmrcContent = `# Optimized npm/bun settings - Generated by optimize-bun-install.js
${newNpmrcContent}

# Don't modify this file directly - use the optimize-bun-install.js script
`;

// Write the updated .npmrc file
fs.writeFileSync(npmrcPath, newNpmrcContent);
console.log('‚úÖ .npmrc optimized successfully');

// Print configured environment variables
console.log('\nüîß Environment variables set:');
console.log('- CYPRESS_SKIP_BINARY_INSTALL=1');
console.log('- HUSKY_SKIP_INSTALL=1');
console.log('- NODE_OPTIONS=--max-old-space-size=4096');

// Check network connectivity to npm registry
try {
  console.log('\nüåê Checking network connectivity to npm registry...');
  execSync('npm ping', { timeout: 10000 });
  console.log('‚úÖ npm registry is reachable');
} catch (error) {
  console.log('‚ö†Ô∏è npm registry might not be reachable. This could affect installation.');
}

// Check system resources
console.log('\nüíª System resources:');
console.log(`- Memory: ${Math.round(require('os').totalmem() / 1024 / 1024 / 1024)} GB total`);
console.log(`- Free memory: ${Math.round(require('os').freemem() / 1024 / 1024)} MB`);

console.log('\n‚ú® Bun installation environment optimized successfully!');
